{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyschool-lib Project","text":"<p>Ce projet est destin\u00e9 \u00e0 mes formations avec deux objectifs :</p> <ul> <li>illustrer le packaging d'un projet Python</li> <li>fournir une biblioth\u00e8que de ressources pour les exercices.</li> </ul> <p>Cette documentation est en cours d'\u00e9criture, vous pouvez trouver les diff\u00e9rents \u00e9l\u00e9ments dans le menu de navigation ci-contre.</p>"},{"location":"package/","title":"Le packaging","text":""},{"location":"package/#quest-ce-quun-package","title":"Qu'est-ce qu'un package ?","text":"<p>Un package Python est, sommairement, un bundle de code Python compress\u00e9 dans un fichier au format particulier qui permet d'\u00eatre diffus\u00e9 \u00e0 d'autres personnes et d'\u00eatre install\u00e9 avec un outil comme <code>pip</code>.</p> <p>Nous avons actuellement 2 type d'archives :</p> <ul> <li>Les packages de sources au format <code>.tar.gz</code> qui est un instantan\u00e9 des sources accompagn\u00e9es d'un    fichier manifest et de m\u00e9tadonn\u00e9es.</li> <li>Un package au format Wheel (<code>.whl</code>) qui est une am\u00e9lioration des <code>Egg</code> et donc le format    actuel. Il peut contenir des extensions pr\u00e9compil\u00e9es.</li> </ul>"},{"location":"package/#les-nouveaux-standards","title":"Les nouveaux standards","text":"<p>Les standards actuels pour sp\u00e9cifier les m\u00e9tadonn\u00e9es utilisent le fichier <code>pyproject.toml</code> et un backend. Ils reposent sur les PEP 517 et PEP 621.</p>"},{"location":"package/#le-fichier-pyprojecttoml","title":"Le fichier pyproject.toml","text":"<p>La PyPA maintient les sp\u00e9cifications techniques du fichier <code>pyproject.toml</code> ainsi qu'un document plus fonctionnel pour \u00e9crire votre pyproject.toml. </p>"},{"location":"package/#documentation","title":"Documentation","text":"<p>Innutile de la paraphraser, la documentation principale est : le Quickstart setuptools.</p>"},{"location":"package/#etapes","title":"\u00c9tapes","text":"<p>Commencer par installer ou mettre \u00e0 jour <code>build</code> :</p> <pre><code>pip install --upgrade build\n</code></pre> <p>Le projet doit poss\u00e9der un fichier <code>pyproject.toml</code>. C'est dans ce fichier un fichier de param\u00e9trage pour cr\u00e9er l'archive.</p> <p>L\u2019archive est cr\u00e9\u00e9e avec la commande</p> <pre><code>python -m build\n</code></pre> <p>Vous avez alors un r\u00e9pertoire <code>build</code>avec une archive <code>tar.gz</code> et une <code>wheel</code>.</p>"},{"location":"package/#installation","title":"Installation","text":"<p>En fonction, pour l\u2019installation avec ou sans la d\u00e9pendance optionnelle, l'instruction doit ressembler \u00e0 :</p> <pre><code>pip install pyflix-0.0.5-py3-none-any.whl\npip install \"pyflix-0.0.5-py3-none-any.whl[cli]\"\n</code></pre> <p>Adaptez la partie concernant le num\u00e9ro de version.</p>"},{"location":"package/#automatisation","title":"Automatisation","text":"<p>Le projet inclut un fichier <code>makefile</code> comportant plusieurs actions :  - <code>setup</code> qui atomatise l'installation et la mise \u00e0 jour des d\u00e9pendances.  - <code>build</code> qui automatise le packaging en reprenant les actions d\u00e9crites plus haut (hors    installation).  - <code>clean</code> qui supprime le r\u00e9pertoire dist et son contenu.</p> <p>En d'autres termes, vous pouvez cr\u00e9er l'archive avec :</p> <pre><code>make build\n</code></pre> <p>et n\u00e9ttoyer votre projet (supprimer le r\u00e9pertoire <code>dist</code> et son contenu) avec :</p> <pre><code>make clean\n</code></pre>"}]}